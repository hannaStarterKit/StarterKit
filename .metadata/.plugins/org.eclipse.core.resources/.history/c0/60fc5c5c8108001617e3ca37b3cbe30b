/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.luciow.warehouse;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.internal.matchers.Not;

import pl.luciow.warehouse.impl.OrderServiceImpl;
import pl.luciow.warehouse.impl.WarehouseImpl;
import pl.luciow.warehouse.model.Item;
import pl.luciow.warehouse.model.NotEnoughItemsException;
import pl.luciow.warehouse.model.Order;
import pl.luciow.warehouse.model.OrderProcessException;

/**
 *
 * @author Mariusz
 */
public class OrderServiceTest {

	private OrderService orderService;

	@Test
	public void fillOrderSuccesTest() {

		// create mock
		Warehouse warehouseMock = Mockito.mock(Warehouse.class);
		orderService = new OrderServiceImpl(null, null, warehouseMock);
		Order order = new Order();

		// define return value for method fillOrder()
		try {
			Mockito.when(warehouseMock.removeItems(Mockito.any(List.class))).thenReturn(null);

			orderService.fillOrder(order);
		} catch (Exception e) {
			assertTrue(false);
		}
		assertTrue(true);
	}

	@Test(expected = OrderProcessException.class)
	public void fillOrderThrowTest() throws OrderProcessException {

		Warehouse warehouseMock = Mockito.mock(Warehouse.class);
		orderService = new OrderServiceImpl(null, null, warehouseMock);
		Order order = new Order();

		// define return value for method fillOrder()
		try {
			Mockito.when(warehouseMock.removeItems(Mockito.any(List.class))).thenThrow(new NotEnoughItemsException());

			orderService.fillOrder(order);
		} catch (NotEnoughItemsException e) {
			assertTrue(true);
		}
		assertTrue(false);
	}

	/*
	 * Zadanie 3.
	 * 
	 * Przetestuj funkcję cancelOrder() w WarehouseImpl ustawiając mock tak,
	 * żeby w wywołaniu addItems() wywołał oryginalną funkcję. Żeby
	 * zaprogramować funkcję zwracającą void, musimy użyć trochę innej składni
	 * niż w poprzednim zadaniu:
	 */
	@Test
	public void cancelOrderTest() throws OrderProcessException {

		Warehouse warehouseMock = Mockito.mock(WarehouseImpl.class);
		orderService = new OrderServiceImpl(null, null, warehouseMock);
		List<Item> listOfItems = new ArrayList<Item>();
		listOfItems.add(new Item());
		Order order = new Order();
		//order.setCompleted(false);
		order.setItems(listOfItems);


		Mockito.doCallRealMethod().when(warehouseMock).addItems(order.getItems());
		orderService.cancelOrder(order);
		Mockito.verify(warehouseMock, Mockito.times(1)).addItems(new Item());

	}

	@Test
	public void processPaymentThrowTest() {
	}

	@Test
	public void processPaymentSuccessTest() {
	}

}
